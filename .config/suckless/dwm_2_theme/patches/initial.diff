diff --git a/config.def.h b/config.def.h
index 7fcb2b5..2bafcb6 100644
--- a/config.def.h
+++ b/config.def.h
@@ -1,17 +1,19 @@
 /* See LICENSE file for copyright and license details. */
-
+#define TERMINAL "st"
 /* appearance */
-static const unsigned int borderpx  = 1;        /* border pixel of windows */
-static const unsigned int snap      = 32;       /* snap pixel */
-static const int showbar            = 1;        /* 0 means no bar */
-static const int topbar             = 1;        /* 0 means bottom bar */
-static const char *fonts[]          = { "monospace:size=10" };
-static const char dmenufont[]       = "monospace:size=10";
+static const unsigned int borderpx  = 3;    // border pixel of windows
+static const unsigned int snap      = 0;    // snap pixel
+static const int showbar            = 1;    // 0 means no bar
+static const int topbar             = 1;    // 0 means bottom bar
+static const char *fonts[]          = { "monospace:size=13", "Symbols Nerd Font:size=13:antialias=true:autohint=true" };
+
+/* Colors */
 static const char col_gray1[]       = "#222222";
 static const char col_gray2[]       = "#444444";
 static const char col_gray3[]       = "#bbbbbb";
 static const char col_gray4[]       = "#eeeeee";
 static const char col_cyan[]        = "#005577";
+
 static const char *colors[][3]      = {
     /*               fg         bg         border   */
     [SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
@@ -19,33 +21,65 @@ static const char *colors[][3]      = {
 };
 
 /* tagging */
-static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
+static const char *tags[] = { "1", "2", "3", "4", "5" };
 
 static const Rule rules[] = {
-    /* xprop(1):
-     *  WM_CLASS(STRING) = instance, class
-     *  WM_NAME(STRING) = title
-     */
-    /* class      instance    title       tags mask     isfloating   monitor */
-    { "Gimp",     NULL,       NULL,       0,            1,           -1 },
-    { "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 },
+    /*  WM_CLASS(STRING) = instance, class */
+    /*  WM_NAME(STRING) = title */
+    /* class            instance    title                       tags mask       isfloating      monitor */
+    { "Gimp",           NULL,       NULL,                       1 << 4,         0,              -1 },
+    { "firefox",        NULL,       NULL,                       1 << 1,         0,              -1 },
+    { "qutebrowser",    NULL,       NULL,                       1 << 1,         0,              -1 },
+    { "Gcr-prompter",   NULL,       NULL,                       0,              1,              -1 },
+    { "mpv",            NULL,       NULL,                       0,              1,              -1 },
+    { "Signal",         NULL,       NULL,                       1 << 2,         0,               1 },
+    { "Lutris",         NULL,       NULL,                       1 << 4,         1,               1 },
+    { "control.exe",    NULL,       NULL,                       1 << 4,         1,              -1 },
+    { NULL,             NULL,       "Downloading file",         1 << 4,         1,              -1 },
+    { NULL,             NULL,       "Wine Mono Installer",      1 << 4,         1,               1 },
+    { NULL,             NULL,       "Battle.net Setup",         1 << 3,         1,               1 },
+    { NULL,             NULL,       "Battle.net",               1 << 3,         1,               1 },
+    { NULL,             NULL,       "World of Warcraft",        1 << 3,         0,              -1 },
+    { "discord",        NULL,       "Discord",                  1 << 4,         1,               1 },
+    { NULL,             NULL,       "Discord",                  1 << 4,         1,               1 },
+    { "Steam",          NULL,       NULL,                       1 << 4,         1,               1 },
+    { NULL,             NULL,       "Steam",                    1 << 4,         1,               1 },
+    { "dota2",          NULL,       NULL,                       1 << 3,         0,              -1 },
+    { "RimWorldLinux",  NULL,       NULL,                       1 << 3,         0,              -1 },
+    { "Zenity",         NULL,       NULL,                       1 << 4,         1,              -1 },
+    { "steam_proton",   NULL,       NULL,                       1 << 4,         1,              -1 },
+    { NULL,             NULL,       "Friends List",             1 << 4,         1,               1 },
+    { NULL,             NULL,       "Wine System Tray",         1 << 4,         1,               1 },
+    { NULL,             NULL,       "Rockstar Games Launcher",  1 << 4,         1,              -1 },
+    { NULL,             NULL,       "Grand Theft Auto V",       1 << 3,         0,              -1 },
+    { NULL,             NULL,       "tremc",                    1 << 4,         0,               1 },
+    { NULL,             NULL,       "notes",                    0,              1,              -1 },
+    { NULL,             NULL,       "pulsemixer",               0,              1,              -1 },
+    //{ NULL,             "spterm",   NULL,                       SPTAG(0),       1,              -1 },
+    //{ NULL,             "spcalc",   NULL,                       SPTAG(1),       1,              -1 },
+    //{ NULL,             "spncmp",   NULL,                       SPTAG(2),       1,              -1 },
+    //{ NULL,             "spdiary",  NULL,                       SPTAG(3),       1,              -1 },
+    //{ NULL,             "spwiki",   NULL,                       SPTAG(4),       1,              -1 },
 };
 
 /* layout(s) */
-static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
-static const int nmaster     = 1;    /* number of clients in master area */
-static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */
-static const int lockfullscreen = 1; /* 1 will force focus on the fullscreen window */
+static const float mfact        = 0.50; // factor of master area size [0.05..0.95]
+static const int nmaster        = 1;    // number of clients in master area
+static const int resizehints    = 0;    // 1 means respect size hints in tiled resizals
+static const int lockfullscreen = 1;    // 1 will force focus on the fullscreen window
 
 static const Layout layouts[] = {
-    /* symbol     arrange function */
-    { "[]=",      tile },    /* first entry is default */
-    { "><>",      NULL },    /* no layout function means floating behavior */
-    { "[M]",      monocle },
+    /* symbol   arrange function */
+    { "[]=",    tile },                     // Default: Master on left, slaves on right
+
+    { "[M]",    monocle },                  // All windows on top of eachother
+
+    { "><>",    NULL },                     // no layout function means floating behavior
 };
 
 /* key definitions */
-#define MODKEY Mod1Mask
+#define MODKEY Mod4Mask
+#define ALTKEY Mod1Mask
 #define TAGKEYS(KEY,TAG) \
     { MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
     { MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
@@ -55,46 +89,107 @@ static const Layout layouts[] = {
 /* helper for spawning shell commands in the pre dwm-5.0 fashion */
 #define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }
 
+#include <X11/XF86keysym.h>
+
 /* commands */
-static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
-static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
-static const char *termcmd[]  = { "st", NULL };
+static const char *termcmd[]  = { TERMINAL, NULL };
 
 static Key keys[] = {
-    /* modifier                     key        function        argument */
-    { MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
-    { MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
-    { MODKEY,                       XK_b,      togglebar,      {0} },
-    { MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
-    { MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
-    { MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
-    { MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
-    { MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
-    { MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
-    { MODKEY,                       XK_Return, zoom,           {0} },
-    { MODKEY,                       XK_Tab,    view,           {0} },
-    { MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
-    { MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
-    { MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
-    { MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
-    { MODKEY,                       XK_space,  setlayout,      {0} },
-    { MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
-    { MODKEY,                       XK_0,      view,           {.ui = ~0 } },
-    { MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
-    { MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
-    { MODKEY,                       XK_period, focusmon,       {.i = +1 } },
-    { MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
-    { MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
-    TAGKEYS(                        XK_1,                      0)
-    TAGKEYS(                        XK_2,                      1)
-    TAGKEYS(                        XK_3,                      2)
-    TAGKEYS(                        XK_4,                      3)
-    TAGKEYS(                        XK_5,                      4)
-    TAGKEYS(                        XK_6,                      5)
-    TAGKEYS(                        XK_7,                      6)
-    TAGKEYS(                        XK_8,                      7)
-    TAGKEYS(                        XK_9,                      8)
-    { MODKEY|ShiftMask,             XK_q,      quit,           {0} },
+    /* modifier                 key         function            argument */
+    { MODKEY,                   XK_Return,  spawn,              {.v = termcmd } },
+    { ALTKEY,                   XK_b,       togglebar,          {0} },
+    { MODKEY,                   XK_j,       focusstack,         {.i = +1 } },
+    { MODKEY,                   XK_k,       focusstack,         {.i = -1 } },
+    { ALTKEY,                   XK_comma,   incnmaster,         {.i = +1 } },
+    { ALTKEY,                   XK_period,  incnmaster,         {.i = -1 } },
+    { MODKEY,                   XK_h,       setmfact,           {.f = -0.05} },
+    { MODKEY,                   XK_l,       setmfact,           {.f = +0.05} },
+    //{ MODKEY|ShiftMask,         XK_h,       setcfact,           {.f = +0.25} },
+    //{ MODKEY|ShiftMask,         XK_l,       setcfact,           {.f = -0.25} },
+    //{ MODKEY|ShiftMask,         XK_o,       setcfact,           {.f =  0.00} },
+    { MODKEY|ShiftMask,         XK_j,       zoom,               {0} },
+    { MODKEY,                   XK_Tab,     view,               {0} },
+    { MODKEY,                   XK_q,       killclient,         {0} },
+    { MODKEY,                   XK_t,       setlayout,          {.v = &layouts[0]} }, // tile
+    { MODKEY|ShiftMask,         XK_t,       setlayout,          {.v = &layouts[1]} }, // bstack
+    { MODKEY,                   XK_y,       setlayout,          {.v = &layouts[2]} }, // spiral
+    //{ MODKEY|ShiftMask,         XK_y,       setlayout,          {.v = &layouts[3]} }, // dwindle
+    //{ MODKEY,                   XK_u,       setlayout,          {.v = &layouts[4]} }, // deck
+    //{ MODKEY|ShiftMask,         XK_u,       setlayout,          {.v = &layouts[5]} }, // monocle
+    //{ MODKEY,                   XK_i,       setlayout,          {.v = &layouts[6]} }, // centeredmaster
+    //{ MODKEY|ShiftMask,         XK_i,       setlayout,          {.v = &layouts[7]} }, // centeredfloatingmaster
+    { MODKEY,                   XK_space,   setlayout,          {0} },
+    { MODKEY|ShiftMask,         XK_space,   togglefloating,     {0} },
+    //{ MODKEY,                   XK_f,       togglefullscreen,   {0} },
+    //{ MODKEY|ShiftMask,         XK_c,       togglecolorfultag,  {0} },
+    { MODKEY,                   XK_0,       view,               {.ui = ~0 } },
+    { MODKEY|ShiftMask,         XK_0,       tag,                {.ui = ~0 } },
+    { ALTKEY,                   XK_Tab,     focusmon,           {.i = +1 } },
+    { ALTKEY|ShiftMask,         XK_h,       tagmon,             {.i = -1 } },
+    { ALTKEY|ShiftMask,         XK_l,       tagmon,             {.i = +1 } },
+    //{ ALTKEY,                   XK_minus,   incrgaps,           {.i = -3 } },
+    //{ ALTKEY,                   XK_equal,   incrgaps,           {.i = +3 } },
+    //{ MODKEY,                   XK_a,       togglegaps,         {0} },
+    //{ MODKEY|ShiftMask,         XK_a,       defaultgaps,        {0} },
+    TAGKEYS(                    XK_1,                            0)
+    TAGKEYS(                    XK_2,                            1)
+    TAGKEYS(                    XK_3,                            2)
+    TAGKEYS(                    XK_4,                            3)
+    TAGKEYS(                    XK_5,                            4)
+    { MODKEY,                   XK_Escape,  spawn,              SHCMD("powermenu") },
+    { MODKEY,                   XK_r,       spawn,              SHCMD("dmenu-query") },
+    //{ MODKEY,                   XK_x,       togglescratch,      {.ui = 0} }, // spterm
+    //{ MODKEY|ShiftMask,         XK_b,       togglescratch,      {.ui = 1} }, // bc
+    //{ MODKEY|ShiftMask,         XK_m,       togglescratch,      {.ui = 2} }, // ncmpcpp
+    //{ MODKEY|ShiftMask,         XK_d,       togglescratch,      {.ui = 3} }, // diary
+    //{ MODKEY|ShiftMask,         XK_n,       togglescratch,      {.ui = 4} }, // wiki
+    { MODKEY,                   XK_Delete,  spawn,              SHCMD("varecord kill") },
+    { ALTKEY,                   XK_Delete,  spawn,              SHCMD("camtoggle kill") },
+    { MODKEY,                   XK_d,       spawn,              SHCMD("dmenu_run") },
+    { MODKEY,                   XK_F1,      spawn,              SHCMD("upnotify") },
+    { MODKEY,                   XK_F2,      spawn,              SHCMD("crontoggle") },
+    { MODKEY,                   XK_F3,      spawn,              SHCMD("gtok") },
+    { MODKEY,                   XK_F4,      spawn,              SHCMD("gameon") },
+    { MODKEY|ShiftMask,         XK_F4,      spawn,              SHCMD("picomtoggle") },
+    { MODKEY,                   XK_F5,      spawn,              SHCMD("varecord") },
+    { MODKEY,                   XK_F6,      spawn,              SHCMD("takepic") },
+    { MODKEY,                   XK_F7,      spawn,              SHCMD("cluttertoggle") },
+    { MODKEY,                   XK_F8,      spawn,              SHCMD(TERMINAL " -e pulsemixer; pkill -RTMIN+17 dwmblocks") },
+    { MODKEY,                   XK_F9,      spawn,              SHCMD("dmenu-mount") },
+    { MODKEY,                   XK_F10,     spawn,              SHCMD("dmenu-unmount") },
+    { MODKEY,                   XK_F11,     spawn,              SHCMD("mpv --no-cache --no-osc --no-input-default-bindings --input-conf=/dev/null --title=webcam $(ls /dev/video[0,2,4,6,8] | tail -n 1)") },
+    { MODKEY,                   XK_F12,     spawn,              SHCMD(TERMINAL " -e tremc") },
+    { ALTKEY|ShiftMask,         XK_F12,     spawn,              SHCMD("torrtoggle") },
+    { ALTKEY,                   XK_F12,     spawn,              SHCMD("torrclear") },
+    { MODKEY,                   XK_Insert,  spawn,              SHCMD("showclip") },
+    { MODKEY,                   XK_grave,   spawn,              SHCMD("emojis") },
+    { MODKEY,                   XK_b,       spawn,              SHCMD("$BROWSER") },
+    { MODKEY,                   XK_c,       spawn,              SHCMD("calnotify") },
+    { MODKEY,                   XK_g,       spawn,              SHCMD(TERMINAL " -e htop") },
+    { MODKEY,                   XK_o,       spawn,              SHCMD(TERMINAL " -e lf") },
+    { MODKEY,                   XK_n,       spawn,              SHCMD(TERMINAL " -e newsboat; pkill -RTMIN+19 dwmblocks") },
+    { MODKEY,                   XK_p,       spawn,              SHCMD("mpc toggle") },
+    { ALTKEY,                   XK_m,       spawn,              SHCMD(TERMINAL " -e neomutt") },
+    { MODKEY,                   XK_m,       spawn,              SHCMD("signal-desktop") },
+    { MODKEY,                   XK_equal,   spawn,              SHCMD("audiobar 0 +5; pkill -RTMIN+17 dwmblocks") },
+    { MODKEY,                   XK_minus,   spawn,              SHCMD("audiobar 0 -5; pkill -RTMIN+17 dwmblocks") },
+    { MODKEY,                   XK_comma,   spawn,              SHCMD("mpc prev") },
+    { MODKEY,                   XK_period,  spawn,              SHCMD("mpc next") },
+    { MODKEY|ShiftMask,         XK_comma,   spawn,              SHCMD("mpc seek -10") },
+    { MODKEY|ShiftMask,         XK_period,  spawn,              SHCMD("mpc seek +10") },
+    { MODKEY,                   XK_Print,   spawn,              SHCMD("screenshot") },
+    { MODKEY|ShiftMask,         XK_Print,   spawn,              SHCMD("keyshot") },
+    { MODKEY|ShiftMask,         XK_z,       spawn,              SHCMD("manterm") },
+    { MODKEY,                   XK_z,       spawn,              SHCMD("manzathura") },
+    { MODKEY,                   XK_s,       spawn,              SHCMD("searchplaylist") },
+    { MODKEY,                   XK_w,       spawn,              SHCMD("searchweb") },
+    { ALTKEY,                   XK_space,   spawn,              SHCMD("dunstctl close") },
+    { ALTKEY|ShiftMask,         XK_space,   spawn,              SHCMD("dunstctl close-all") },
+    { ALTKEY|ShiftMask,         XK_comma,   spawn,              SHCMD("dunstctl history-pop") },
+
+    { 0,    XK_Print,                   spawn,              SHCMD("maim pic-full-$(date '+%y%m%d-%H%M-%S').png") },
+    { 0,    XF86XK_AudioRaiseVolume,    spawn,              SHCMD("audiobar 0 +5; pkill -RTMIN+17 dwmblocks") },
+    { 0,    XF86XK_AudioLowerVolume,    spawn,              SHCMD("audiobar 0 -5; pkill -RTMIN+17 dwmblocks") },
 };
 
 /* button definitions */
diff --git a/drw.c b/drw.c
index b192ef8..750993d 100644
--- a/drw.c
+++ b/drw.c
@@ -133,19 +133,6 @@ xfont_create(Drw *drw, const char *fontname, FcPattern *fontpattern)
         die("no font specified.");
     }
 
-    /* Do not allow using color fonts. This is a workaround for a BadLength
-     * error from Xft with color glyphs. Modelled on the Xterm workaround. See
-     * https://bugzilla.redhat.com/show_bug.cgi?id=1498269
-     * https://lists.suckless.org/dev/1701/30932.html
-     * https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=916349
-     * and lots more all over the internet.
-     */
-    FcBool iscol;
-    if(FcPatternGetBool(xfont->pattern, FC_COLOR, 0, &iscol) == FcResultMatch && iscol) {
-        XftFontClose(drw->dpy, xfont);
-        return NULL;
-    }
-
     font = ecalloc(1, sizeof(Fnt));
     font->xfont = xfont;
     font->pattern = pattern;
diff --git a/dwm.c b/dwm.c
index 3db461e..0137126 100644
--- a/dwm.c
+++ b/dwm.c
@@ -1640,11 +1640,23 @@ sigchld(int unused)
     while (0 < waitpid(-1, NULL, WNOHANG));
 }
 
+void
+sighup(int unused)
+{
+    Arg a = {.i = 1};
+    quit(&a);
+}
+
+void
+sigterm(int unused)
+{
+    Arg a = {.i = 0};
+    quit(&a);
+}
+
 void
 spawn(const Arg *arg)
 {
-    if (arg->v == dmenucmd)
-        dmenumon[0] = '0' + selmon->num;
     if (fork() == 0) {
         if (dpy)
             close(ConnectionNumber(dpy));
