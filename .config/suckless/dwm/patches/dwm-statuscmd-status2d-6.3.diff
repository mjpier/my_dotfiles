diff --git a/config.def.h b/config.def.h
index 2bafcb6..aa84836 100644
--- a/config.def.h
+++ b/config.def.h
@@ -89,6 +89,8 @@ static const Layout layouts[] = {
 /* helper for spawning shell commands in the pre dwm-5.0 fashion */
 #define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }
 
+#define STATUSBAR "dwmblocks"
+
 #include <X11/XF86keysym.h>
 
 /* commands */
@@ -195,17 +197,19 @@ static Key keys[] = {
 /* button definitions */
 /* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
 static Button buttons[] = {
-    /* click                event mask      button          function        argument */
-    { ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
-    { ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
-    { ClkWinTitle,          0,              Button2,        zoom,           {0} },
-    { ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
-    { ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
-    { ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
-    { ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
-    { ClkTagBar,            0,              Button1,        view,           {0} },
-    { ClkTagBar,            0,              Button3,        toggleview,     {0} },
-    { ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
-    { ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
+    /* click            event mask  button      function        argument */
+    { ClkLtSymbol,      0,          Button1,    setlayout,      {0} },
+    { ClkLtSymbol,      0,          Button3,    setlayout,      {.v = &layouts[2]} },
+    { ClkWinTitle,      0,          Button2,    zoom,           {0} },
+    { ClkStatusText,    0,          Button1,    sigstatusbar,   {.i = 1} },
+    { ClkStatusText,    0,          Button2,    sigstatusbar,   {.i = 2} },
+    { ClkStatusText,    0,          Button3,    sigstatusbar,   {.i = 3} },
+    { ClkClientWin,     MODKEY,     Button1,    movemouse,      {0} },
+    { ClkClientWin,     MODKEY,     Button2,    togglefloating, {0} },
+    { ClkClientWin,     MODKEY,     Button3,    resizemouse,    {0} },
+    { ClkTagBar,        0,          Button1,    view,           {0} },
+    { ClkTagBar,        0,          Button3,    toggleview,     {0} },
+    { ClkTagBar,        MODKEY,     Button1,    tag,            {0} },
+    { ClkTagBar,        MODKEY,     Button3,    toggletag,      {0} },
 };
 
diff --git a/dwm.c b/dwm.c
index 3af07cf..b5caad0 100644
--- a/dwm.c
+++ b/dwm.c
@@ -173,6 +173,7 @@ static void focusstack(const Arg *arg);
 static Atom getatomprop(Client *c, Atom prop);
 static int getrootptr(int *x, int *y);
 static long getstate(Window w);
+static pid_t getstatusbarpid();
 static int gettextprop(Window w, Atom atom, char *text, unsigned int size);
 static void grabbuttons(Client *c, int focused);
 static void grabkeys(void);
@@ -207,6 +208,7 @@ static void setup(void);
 static void seturgent(Client *c, int urg);
 static void showhide(Client *c);
 static void sigchld(int unused);
+static void sigstatusbar(const Arg *arg);
 static void spawn(const Arg *arg);
 static void tag(const Arg *arg);
 static void tagmon(const Arg *arg);
@@ -239,6 +241,9 @@ static void zoom(const Arg *arg);
 /* variables */
 static const char broken[] = "broken";
 static char stext[1024];
+static int statussig;
+static int statusw;
+static pid_t statuspid = -1;
 static int screen;
 static int sw, sh;           /* X display screen geometry width, height */
 static int bh, blw = 0;      /* bar geometry */
@@ -441,9 +446,34 @@ buttonpress(XEvent *e)
             arg.ui = 1 << i;
         } else if (ev->x < x + blw)
             click = ClkLtSymbol;
-        else if (ev->x > selmon->ww - (int)TEXTW(stext))
+        else if (ev->x > selmon->ww - statusw) {
+            x = selmon->ww - statusw;
             click = ClkStatusText;
-        else
+
+            char *text, *s, ch;
+            statussig = 0;
+            for (text = s = stext; *s && x <= ev->x; s++) {
+                if ((unsigned char)(*s) < ' ') {
+                    ch = *s;
+                    *s = '\0';
+                    x += TEXTW(text) - lrpad;
+                    *s = ch;
+                    text = s + 1;
+                    if (x >= ev->x)
+                        break;
+                    statussig = ch;
+                } else if (*s == '^') {
+                    *s = '\0';
+                    x += TEXTW(text) - lrpad;
+                    *s = '^';
+                    if (*(++s) == 'f')
+                        x += atoi(++s);
+                    while (*(s++) != '^');
+                    text = s;
+                    s--;
+                }
+            }
+        } else
             click = ClkWinTitle;
     } else if ((c = wintoclient(ev->window))) {
         focus(c);
@@ -696,7 +726,7 @@ dirtomon(int dir)
 
 int
 drawstatusbar(Monitor *m, int bh, char* stext) {
-    int ret, i, w, x, len;
+    int ret, i, j, w, x, len;
     short isCode = 0;
     char *text;
     char *p;
@@ -705,7 +735,12 @@ drawstatusbar(Monitor *m, int bh, char* stext) {
     if (!(text = (char*) malloc(sizeof(char)*len)))
         die("malloc");
     p = text;
-    memcpy(text, stext, len);
+
+    i = -1, j = 0;
+    while (stext[++i])
+        if ((unsigned char)stext[i] >= ' ')
+            text[j++] = stext[i];
+    text[j] = '\0';
 
     /* compute width of the status text */
     w = 0;
@@ -816,7 +851,7 @@ drawbar(Monitor *m)
 
     /* draw status first so it can be overdrawn by tags later */
     if (m == selmon) { /* status is only drawn on selected monitor */
-        tw = m->ww - drawstatusbar(m, bh, stext);
+        tw = statusw = m->ww - drawstatusbar(m, bh, stext);
     }
 
     for (c = m->clients; c; c = c->next) {
@@ -982,6 +1017,30 @@ getatomprop(Client *c, Atom prop)
     return atom;
 }
 
+pid_t
+getstatusbarpid()
+{
+    char buf[32], *str = buf, *c;
+    FILE *fp;
+
+    if (statuspid > 0) {
+        snprintf(buf, sizeof(buf), "/proc/%u/cmdline", statuspid);
+        if ((fp = fopen(buf, "r"))) {
+            fgets(buf, sizeof(buf), fp);
+            while ((c = strchr(str, '/')))
+                str = c + 1;
+            fclose(fp);
+            if (!strcmp(str, STATUSBAR))
+                return statuspid;
+        }
+    }
+    if (!(fp = popen("pgrep -o "STATUSBAR, "r")))
+        return -1;
+    fgets(buf, sizeof(buf), fp);
+    pclose(fp);
+    return strtoul(buf, NULL, 10);
+}
+
 int
 getrootptr(int *x, int *y)
 {
@@ -1748,6 +1807,20 @@ sigchld(int unused)
     while (0 < waitpid(-1, NULL, WNOHANG));
 }
 
+void
+sigstatusbar(const Arg *arg)
+{
+    union sigval sv;
+
+    if (!statussig)
+        return;
+    sv.sival_int = arg->i;
+    if ((statuspid = getstatusbarpid()) <= 0)
+        return;
+
+    sigqueue(statuspid, SIGRTMIN+statussig, sv);
+}
+
 void
 sighup(int unused)
 {
