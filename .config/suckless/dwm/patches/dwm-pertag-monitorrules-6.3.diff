diff --git a/config.def.h b/config.def.h
index 13ba114..ff56bc8 100644
--- a/config.def.h
+++ b/config.def.h
@@ -98,6 +98,12 @@ static const Layout layouts[] = {
     { "><>",    NULL },                     // no layout function means floating behavior
 };
 
+static const MonitorRule monrules[] = {
+    /* monitor  tag layout  mfact   nmaster showbar topbar */
+    {  1,       -1, 0,      -1,     -1,     0,      -1 }, // Second monitor
+    { -1,       -1, 0,      -1,     -1,    -1,      -1 }, // Primary monitor default
+};
+
 /* key definitions */
 #define MODKEY Mod4Mask
 #define ALTKEY Mod1Mask
diff --git a/dwm.c b/dwm.c
index c34ad76..0845fec 100644
--- a/dwm.c
+++ b/dwm.c
@@ -111,6 +111,7 @@ typedef struct {
     void (*arrange)(Monitor *);
 } Layout;
 
+typedef struct Pertag Pertag;
 struct Monitor {
     char ltsymbol[16];
     float mfact;
@@ -131,6 +132,7 @@ struct Monitor {
     Monitor *next;
     Window barwin;
     const Layout *lt[2];
+    Pertag *pertag;
 };
 
 typedef struct {
@@ -142,6 +144,16 @@ typedef struct {
     int monitor;
 } Rule;
 
+typedef struct {
+    int monitor;
+    int tag;
+    int layout;
+    float mfact;
+    int nmaster;
+    int showbar;
+    int topbar;
+} MonitorRule;
+
 /* function declarations */
 static void applyrules(Client *c);
 static int applysizehints(Client *c, int *x, int *y, int *w, int *h, int interact);
@@ -280,6 +292,15 @@ static Window root, wmcheckwin;
 /* configuration, allows nested code to access above variables */
 #include "config.h"
 
+struct Pertag {
+    unsigned int curtag, prevtag; /* current and previous tag */
+    int nmasters[LENGTH(tags) + 1]; /* number of windows in master area */
+    float mfacts[LENGTH(tags) + 1]; /* mfacts per tag */
+    unsigned int sellts[LENGTH(tags) + 1]; /* selected layouts */
+    const Layout *ltidxs[LENGTH(tags) + 1][2]; /* matrix of tags and layouts indexes  */
+    Bool showbars[LENGTH(tags) + 1]; /* display bar for the current tag */
+};
+
 /* compile-time check if all tags fit into an unsigned int bit array. */
 struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };
 
@@ -540,6 +561,7 @@ cleanupmon(Monitor *mon)
     }
     XUnmapWindow(dpy, mon->barwin);
     XDestroyWindow(dpy, mon->barwin);
+    free(mon->pertag);
     free(mon);
 }
 
@@ -664,8 +686,9 @@ configurerequest(XEvent *e)
 Monitor *
 createmon(void)
 {
-    Monitor *m;
-
+    Monitor *m, *mon;
+    int i, mi, j, layout;
+    const MonitorRule *mr;
     m = ecalloc(1, sizeof(Monitor));
     m->tagset[0] = m->tagset[1] = 1;
     m->mfact = mfact;
@@ -673,9 +696,55 @@ createmon(void)
     m->showbar = showbar;
     m->topbar = topbar;
     m->colorfultag = colorfultag ? colorfultag : 0;
-    m->lt[0] = &layouts[0];
-    m->lt[1] = &layouts[1 % LENGTH(layouts)];
-    strncpy(m->ltsymbol, layouts[0].symbol, sizeof m->ltsymbol);
+
+    for (mi = 0, mon = mons; mon; mon = mon->next, mi++);
+    for (j = 0; j < LENGTH(monrules); j++) {
+        mr = &monrules[j];
+        if ((mr->monitor == -1 || mr->monitor == mi)
+                && (mr->tag <= 0 || (m->tagset[0] & (1 << (mr->tag - 1))))
+           ) {
+            layout = MAX(mr->layout, 0);
+            layout = MIN(layout, LENGTH(layouts) - 1);
+            m->lt[0] = &layouts[layout];
+            m->lt[1] = &layouts[1 % LENGTH(layouts)];
+            strncpy(m->ltsymbol, layouts[layout].symbol, sizeof m->ltsymbol);
+
+            if (mr->mfact > -1)
+                m->mfact = mr->mfact;
+            if (mr->nmaster > -1)
+                m->nmaster = mr->nmaster;
+            if (mr->showbar > -1)
+                m->showbar = mr->showbar;
+            if (mr->topbar > -1)
+                m->topbar = mr->topbar;
+            break;
+        }
+    }
+
+    if (!(m->pertag = (Pertag *)calloc(1, sizeof(Pertag))))
+        die("fatal: could not malloc() %u bytes\n", sizeof(Pertag));
+    m->pertag->curtag = m->pertag->prevtag = 1;
+    for (i = 0; i <= LENGTH(tags); i++) {
+        /* init layouts */
+        m->pertag->sellts[i] = m->sellt;
+
+        /* init showbar */
+        m->pertag->showbars[i] = m->showbar;
+
+        for (j = 0; j < LENGTH(monrules); j++) {
+            mr = &monrules[j];
+            if ((mr->monitor == -1 || mr->monitor == mi) && (mr->tag == -1 || mr->tag == i)) {
+                layout = MAX(mr->layout, 0);
+                layout = MIN(layout, LENGTH(layouts) - 1);
+                m->pertag->ltidxs[i][0] = &layouts[layout];
+                m->pertag->ltidxs[i][1] = m->lt[0];
+                m->pertag->nmasters[i] = (mr->nmaster > -1 ? mr->nmaster : m->nmaster);
+                m->pertag->mfacts[i] = (mr->mfact > -1 ? mr->mfact : m->mfact);
+                m->pertag->showbars[i] = (mr->showbar > -1 ? mr->showbar : m->showbar);
+                break;
+            }
+        }
+    }
     return m;
 }
 
@@ -1152,7 +1221,7 @@ grabkeys(void)
 void
 incnmaster(const Arg *arg)
 {
-    selmon->nmaster = MAX(selmon->nmaster + arg->i, 0);
+    selmon->nmaster = selmon->pertag->nmasters[selmon->pertag->curtag] = MAX(selmon->nmaster + arg->i, 0);
     arrange(selmon);
 }
 
@@ -1686,10 +1755,13 @@ setfullscreen(Client *c, int fullscreen)
 void
 setlayout(const Arg *arg)
 {
-    if (!arg || !arg->v || arg->v != selmon->lt[selmon->sellt])
-        selmon->sellt ^= 1;
+    if (!arg || !arg->v || arg->v != selmon->lt[selmon->sellt]) {
+        selmon->pertag->sellts[selmon->pertag->curtag] ^= 1;
+        selmon->sellt = selmon->pertag->sellts[selmon->pertag->curtag];
+    }
     if (arg && arg->v)
-        selmon->lt[selmon->sellt] = (Layout *)arg->v;
+        selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt] = (Layout *)arg->v;
+    selmon->lt[selmon->sellt] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt];
     strncpy(selmon->ltsymbol, selmon->lt[selmon->sellt]->symbol, sizeof selmon->ltsymbol);
     if (selmon->sel)
         arrange(selmon);
@@ -1708,7 +1780,7 @@ setmfact(const Arg *arg)
     f = arg->f < 1.0 ? arg->f + selmon->mfact : arg->f - 1.0;
     if (f < 0.05 || f > 0.95)
         return;
-    selmon->mfact = f;
+    selmon->mfact = selmon->pertag->mfacts[selmon->pertag->curtag] = f;
     arrange(selmon);
 }
 
@@ -1914,7 +1986,7 @@ tile(Monitor *m)
 void
 togglebar(const Arg *arg)
 {
-    selmon->showbar = !selmon->showbar;
+    selmon->showbar = selmon->pertag->showbars[selmon->pertag->curtag] = !selmon->showbar;
     updatebarpos(selmon);
     XMoveResizeWindow(dpy, selmon->barwin, selmon->wx, selmon->by, selmon->ww, bh);
     arrange(selmon);
@@ -1960,9 +2032,29 @@ void
 toggleview(const Arg *arg)
 {
     unsigned int newtagset = selmon->tagset[selmon->seltags] ^ (arg->ui & TAGMASK);
+    int i;
 
     if (newtagset) {
+        if (newtagset == ~0) {
+            selmon->pertag->prevtag = selmon->pertag->curtag;
+            selmon->pertag->curtag = 0;
+        }
+        /* test if the user did not select the same tag */
+        if (!(newtagset & 1 << (selmon->pertag->curtag - 1))) {
+            selmon->pertag->prevtag = selmon->pertag->curtag;
+            for (i=0; !(newtagset & 1 << i); i++) ;
+            selmon->pertag->curtag = i + 1;
+        }
         selmon->tagset[selmon->seltags] = newtagset;
+
+        /* apply settings for this view */
+        selmon->nmaster = selmon->pertag->nmasters[selmon->pertag->curtag];
+        selmon->mfact = selmon->pertag->mfacts[selmon->pertag->curtag];
+        selmon->sellt = selmon->pertag->sellts[selmon->pertag->curtag];
+        selmon->lt[selmon->sellt] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt];
+        selmon->lt[selmon->sellt^1] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt^1];
+        if (selmon->showbar != selmon->pertag->showbars[selmon->pertag->curtag])
+            togglebar(NULL);
         focus(NULL);
         arrange(selmon);
     }
@@ -2257,11 +2349,33 @@ updatewmhints(Client *c)
 void
 view(const Arg *arg)
 {
+    int i;
+    unsigned int tmptag;
+
     if ((arg->ui & TAGMASK) == selmon->tagset[selmon->seltags])
         return;
     selmon->seltags ^= 1; /* toggle sel tagset */
-    if (arg->ui & TAGMASK)
+    if (arg->ui & TAGMASK) {
+        selmon->pertag->prevtag = selmon->pertag->curtag;
         selmon->tagset[selmon->seltags] = arg->ui & TAGMASK;
+        if (arg->ui == ~0)
+            selmon->pertag->curtag = 0;
+        else {
+            for (i=0; !(arg->ui & 1 << i); i++) ;
+            selmon->pertag->curtag = i + 1;
+        }
+    } else {
+        tmptag = selmon->pertag->prevtag;
+        selmon->pertag->prevtag = selmon->pertag->curtag;
+        selmon->pertag->curtag = tmptag;
+    }
+    selmon->nmaster = selmon->pertag->nmasters[selmon->pertag->curtag];
+    selmon->mfact = selmon->pertag->mfacts[selmon->pertag->curtag];
+    selmon->sellt = selmon->pertag->sellts[selmon->pertag->curtag];
+    selmon->lt[selmon->sellt] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt];
+    selmon->lt[selmon->sellt^1] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt^1];
+    if (selmon->showbar != selmon->pertag->showbars[selmon->pertag->curtag])
+        togglebar(NULL);
     focus(NULL);
     arrange(selmon);
 }
